#define cif0 0x30
#define cif1 0x31
#define cif2 0x32
#define cif3 0x33
#define cif4 0x34
#define cif5 0x35
#define cif6 0x36
#define cif7 0x37
#define cif8 0x38
#define cif9 0x39
#define enter 0x0D

#include <iostream>
#include <fstream>
#include <windows.h>
#include <tlhelp32.h>
#include <processthreadsapi.h>
#include <cstring>
#include <winuser.h>
#include <time.h>
#include <stdio.h>


using namespace std;

ifstream f("settings.txt");





char culoare[20], logline[256];
long long bet, pariu;
int ceas[25][61][61], ok, ceas2[25][61][61], ceas1[61][61];
char lst[255];
long profit, plush, minush,minunat;
char path[150];
char g[50];
long blk, grn, red;


void last()
{
    if (ceas2[(logline[1] - '0') * 10 + (logline[2] - '0')][((logline[4] - '0') * 10) + (logline[5] - '0')][(logline[7] - '0') * 10 + (logline[8] - '0')] == 0)
        if(logline[34]=='B'&& logline[35] == 'L'&& logline[36] == 'A'&& logline[37] == 'C'&& logline[38] == 'K')
    {
            lst[minunat++] = 'B'; blk++;
        ceas2[(logline[1] - '0') * 10 + (logline[2] - '0')][((logline[4] - '0') * 10) + (logline[5] - '0')][(logline[7] - '0') * 10 + (logline[8] - '0')] = 1;
        if (lst[minunat - 1] != lst[minunat - 2] && lst[minunat - 2])
        {
            lst[minunat++] = lst[minunat - 1];
            lst[minunat - 2] = ' ';
        }
        cout << '\n' << "Last: " << lst << '\n';
        cout << "RED: " << (float)red / (blk + grn + red) * 100.<<"%; GREEN: "<< (float)grn / (blk + grn + red) * 100.<<"%; BLACK: "<< (float)blk / (blk + grn + red) * 100.<<"%"<<'\n';
    }
        else if (logline[34] == 'G' && logline[35] == 'R' && logline[36] == 'E' && logline[37] == 'E' && logline[38] == 'N')
        {
            lst[minunat++] = 'G'; grn++;
            ceas2[(logline[1] - '0') * 10 + (logline[2] - '0')][((logline[4] - '0') * 10) + (logline[5] - '0')][(logline[7] - '0') * 10 + (logline[8] - '0')] = 1;
            if (lst[minunat - 1] != lst[minunat - 2] && lst[minunat - 2])
            {
                lst[minunat++] = lst[minunat - 1];
                lst[minunat - 2] = ' ';
            }
            cout << '\n' << "Last: " << lst << '\n';
            cout << "RED: " << (float)red / (blk + grn + red) * 100. << "%; GREEN: " << (float)grn / (blk + grn + red) * 100. << "%; BLACK: " << (float)blk / (blk + grn + red) * 100. << "%" << '\n';
        }
        else if (logline[34] == 'R' && logline[35] == 'E' && logline[36] == 'D')
        {
            lst[minunat++] = 'R'; red++;
            ceas2[(logline[1] - '0') * 10 + (logline[2] - '0')][((logline[4] - '0') * 10) + (logline[5] - '0')][(logline[7] - '0') * 10 + (logline[8] - '0')] = 1;
            if (lst[minunat - 1] != lst[minunat - 2]&& lst[minunat - 2])
            {
                lst[minunat++] = lst[minunat - 1];
                lst[minunat - 2] = ' ';
            }
            cout<<'\n'<<"Last: "<<lst<<'\n';
            cout << "RED: " << (float)red / (blk + grn + red) * 100. << "%; GREEN: " << (float)grn / (blk + grn + red) * 100. << "%; BLACK: " << (float)blk / (blk + grn + red) * 100. << "%" << '\n';

        }

}

int verif(char a[256])
{
        if(a[9] == ']')
            {
            if (a[11] == 'Y' && logline[12] == 'o' && logline[13] == 'u')
                if (a[15] == 'w'&& a[16] == 'o'&& a[17] == 'n')
                    return 1;
                else if (a[15]=='l'&& a[16] == 'o'&& a[17] == 's')
                    return 2;
            }
        return 0;
        
}
void sterg()
{
    for (int i = 1; i <= 10; i++)
    {
        INPUT ip;

        ip.type = INPUT_KEYBOARD;
        ip.ki.wScan = 0;
        ip.ki.time = 0;
        ip.ki.dwExtraInfo = 0;
        ip.ki.wVk = 0x08;


        ip.ki.dwFlags = 0;
        SendInput(1, &ip, sizeof(INPUT));


        ip.ki.dwFlags = KEYEVENTF_KEYUP;
        SendInput(1, &ip, sizeof(INPUT));
    }
}

long long pow(int a, int n)
{
    if (n == 0)
        return 1;
    long long b = a;
    for (int i = 2; i <= n; i++)
        b = b * a;
    return b;
}

int nr_cif() {
    long long x = bet,k=0;
    while (x)
    {
        k++;
        x = x / 10;
    }
    return k;
}

void output(int n)
{
    sterg();
    cout << logline << endl;
    Sleep(500);
    for (int i = 1; i <= n; i++)
    {
        INPUT ip;

        ip.type = INPUT_KEYBOARD;
        ip.ki.wScan = 0;
        ip.ki.time = 0;
        ip.ki.dwExtraInfo = 0;
        ip.ki.wVk = int(bet);
        if (bet / pow(10, n - i) % 10 == 1)
            ip.ki.wVk = cif1;
        else if (bet / pow(10, n - i) % 10 == 0)
            ip.ki.wVk = cif0;
        else if (bet / pow(10, n - i) % 10 == 2)
            ip.ki.wVk = cif2;
        else if (bet / pow(10, n - i) % 10 == 3)
            ip.ki.wVk = cif3;
        else if (bet / pow(10, n - i) % 10 == 4)
            ip.ki.wVk = cif4;
        else if (bet / pow(10, n - i) % 10 == 5)
            ip.ki.wVk = cif5;
        else if (bet / pow(10, n - i) % 10 == 6)
            ip.ki.wVk = cif6;
        else if (bet / pow(10, n - i) % 10 == 7)
            ip.ki.wVk = cif7;
        else if (bet / pow(10, n - i) % 10 == 8)
            ip.ki.wVk = cif8;
        else if (bet / pow(10, n - i) % 10 == 9)
            ip.ki.wVk = cif9;

        
        ip.ki.dwFlags = 0;
        SendInput(1, &ip, sizeof(INPUT));

        Sleep(10);
        ip.ki.dwFlags = KEYEVENTF_KEYUP;
        SendInput(1, &ip, sizeof(INPUT));
        Sleep(100);
    }
    Sleep(500);
    INPUT ip;

    ip.type = INPUT_KEYBOARD;
    ip.ki.wScan = 0;
    ip.ki.time = 0;
    ip.ki.dwExtraInfo = 0;
    ip.ki.wVk = enter;


    ip.ki.dwFlags = 0;
    SendInput(1, &ip, sizeof(INPUT));


    ip.ki.dwFlags = KEYEVENTF_KEYUP;
    SendInput(1, &ip, sizeof(INPUT));
}
void pausecase() {
    if(ceas1[((logline[4] - '0') * 10) + (logline[5] - '0')][(logline[7] - '0') * 10 + (logline[8] - '0')] == 0)
    if(logline[19]==g[0]&& logline[20] == g[1]&& logline[21] == g[2]&& logline[22] == g[3]&& logline[23] == g[4]&& logline[25] == g[6]&& logline[26] == g[7]&& logline[27] == g[8])
        if (logline[38] == 'm' && logline[39] == 'a' && logline[40] == 'c' && logline[41] == 'a' && logline[42] == 'r' && logline[43] == 'e')
        {
            ifstream chat(path);
            remove(path);
            chat.close();
            ceas1[((logline[4] - '0') * 10) + (logline[5] - '0')][(logline[7] - '0') * 10 + (logline[8] - '0')] = 1;
            cout << "PAUSED\n";
            system("pause");
            cout << "\nRESUMED\n";
        }
    //aici trebuie pus un nume
}

void culori()
{
    if (strcmp(culoare,"red")==0)
    {
        SetCursorPos(595, 560);
        
    }
    else if (strcmp(culoare,"green")==0)
        SetCursorPos(955, 560);
    else
        SetCursorPos(1342, 560);
    Sleep(500);
    mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
    mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
    
    Sleep(500);
}


void click()
{
    
    if(ceas[(logline[1]-'0')*10+(logline[2]-'0')][((logline[4]-'0')*10)+ (logline[5]-'0')][(logline[7]-'0')*10+ (logline[8] - '0')]==0)
        if (verif(logline)==1)
        {
            plush += bet;
            ceas[(logline[1] - '0') * 10 + (logline[2] - '0')][((logline[4] - '0') * 10) + (logline[5] - '0')][(logline[7] - '0') * 10 + (logline[8] - '0')] = 1;
                culori();
                bet = pariu;
                output(nr_cif());
                ok = 1;

        }
        else if (verif(logline)==2)
        {
            minush -= bet;
            ceas[(logline[1] - '0') * 10 + (logline[2] - '0')][((logline[4] - '0') * 10) + (logline[5] - '0')][(logline[7] - '0') * 10 + (logline[8] - '0')] = 1;
            culori();
            bet = bet * 2;
            output(nr_cif());
            ok = 1;
            

        }
    
}

int main()
{
    
    
    double timp; char setare[256];
    
    f >> timp;
    
    f >> pariu;
    
    bet = pariu;
    char p[100];
    f >> p;
    char username[100];
    f.get();
    f.getline(username, 100) ;
    strcpy(path, "C:/Users/");
    strcat(path, username);
    strcat(path, "/Documents/GTA San Andreas User Files/SAMP/chatlog.txt");
    
    f >> g;
    strcpy(culoare, p);
    
    cout << "Programul incepe in 15 secunde";
    Sleep(15000);
    cout << "\nStarted\n";
    clock_t begin = clock();
    
    clock_t end = clock();
    double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
    
    while (time_spent = (double)(end - begin) / CLOCKS_PER_SEC < timp)
    {
   
        ifstream chat(path);
        while (chat.getline(logline, 255))
        { 
            last();
            pausecase();
            ok = 0;
            (click());
            if (ok)
            {
                cout << plush << '\n' << minush << '\n' << "__________________________________" << plush + minush << " - profit" << endl << endl;
                Sleep(30000);
            }

        }

        Sleep(15000);
        end = clock();
    }
}
